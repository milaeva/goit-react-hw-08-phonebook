{"version":3,"sources":["components/Container/Container.js","components/Section/Section.module.css","components/Container/Container.module.css","components/Section/Section.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ModalEditContact/ModalEditContact.module.css","components/ContactItem/ContactItem.module.css","components/ContactList/ContactList.module.css","pages/ContactsPage.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ModalEditContact/ModalEditContact.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","pages/ContactsPage.js"],"names":["Container","children","className","s","container","module","exports","Section","nameForClass","ContactForm","items","useSelector","contactsSelectors","getItems","dispatch","useDispatch","initialState","name","number","useState","user","setUser","handleGetValue","e","currentTarget","value","target","prev","onSubmit","newName","preventDefault","find","toLowerCase","store","addNotification","title","message","type","insert","animationIn","animationOut","dismiss","duration","onScreen","contactsOperations","addContact","label","input","onChange","placeholder","pattern","required","button","Filter","filter","getFilter","changeFilter","trim","icon","ModalEditContact","idEdit","show","setShow","setNewName","newNumber","setNewNumber","handleClose","handleEdit","id","repeatCheck","contact","editContact","Error","Button","buttonEdit","onClick","Modal","onHide","backdrop","keyboard","centered","size","form","inputName","inputNumber","Footer","modalFooter","buttonCancel","buttonDoneEdit","ContactItem","link","href","wrapper","buttonAccent","deleteContact","ContactList","getVisibleItems","list","map","item","ContactsPage","useEffect","getContacts","visibleItems","newContactWrapper","newContactTitle","titleContacts","text"],"mappings":"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","file":"static/js/4.03246e63.chunk.js","sourcesContent":["import s from './Container.module.css';\n\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nexport default Container;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new-contact\":\"Section_new-contact__2BHkk\",\"section\":\"Section_section__41vIk\",\"sectionList\":\"Section_sectionList__mMIgS Section_section__41vIk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__WA20h\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\nimport Container from 'components/Container';\n\nconst Section = ({ nameForClass, children }) => (\n  <section className={s[`${nameForClass}`]}>\n    <Container>{children}</Container>\n  </section>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  nameForClass: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__3R0PC\",\"input\":\"ContactForm_input__Qy8iG\",\"button\":\"ContactForm_button__3Z19p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"Filter_icon__3YGBE\",\"label\":\"Filter_label__xe8nj\",\"input\":\"Filter_input__Ps6sX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonEdit\":\"ModalEditContact_buttonEdit__3exyd\",\"buttonDoneEdit\":\"ModalEditContact_buttonDoneEdit__2qdI5\",\"buttonCancel\":\"ModalEditContact_buttonCancel__sNXhu\",\"form\":\"ModalEditContact_form__2bWTc\",\"label\":\"ModalEditContact_label__JjFc4\",\"inputName\":\"ModalEditContact_inputName__29cc_\",\"inputNumber\":\"ModalEditContact_inputNumber__25nu9\",\"modalFooter\":\"ModalEditContact_modalFooter__3JU5f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"ContactItem_link__1cZfo\",\"name\":\"ContactItem_name__17xik\",\"wrapper\":\"ContactItem_wrapper__rQpLj\",\"icon\":\"ContactItem_icon__SHWG-\",\"number\":\"ContactItem_number__olbyu\",\"buttonAccent\":\"ContactItem_buttonAccent__1ZGTi\",\"button\":\"ContactItem_button__3V91P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__34Pyl\",\"item\":\"ContactList_item__njv7X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newContactWrapper\":\"ContactsPage_newContactWrapper__3JMVv\",\"newContactTitle\":\"ContactsPage_newContactTitle__36PVs\",\"titleContacts\":\"ContactsPage_titleContacts__U1fKP\",\"text\":\"ContactsPage_text__1eswE\",\"title\":\"ContactsPage_title__Lz9ZT\"};","//===================================================//\n//**** variable with useReducer\n//===================================================//\n\n// import { useReducer } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { contactsSelectors } from 'redux/contacts';\n// import { store } from 'react-notifications-component';\n// import { contactsOperations } from 'redux/contacts';\n// import s from './ContactForm.module.css';\n\n// const ContactForm = () => {\n//   const items = useSelector(contactsSelectors.getItems);\n//   const dispatch = useDispatch();\n//   const initialValue = '';\n\n//   const init = initialValue => {\n//     return { name: initialValue, number: initialValue };\n//   };\n\n//   const reducer = (state, { name, value }) => {\n//     return { ...state, [name]: value };\n//   };\n\n//   const [state, dispatchContactForm] = useReducer(reducer, initialValue, init);\n\n//   const handleGetValue = e => {\n//     const name = e.currentTarget.name;\n//     const value = e.target.value;\n//     dispatchContactForm({ name, value });\n//   };\n\n//   const showNotification = () => {\n//     store.addNotification({\n//       title: 'Oops!',\n//       message:\n//         'But there’s already a contact with that name on your contact list',\n//       type: 'danger',\n//       insert: 'top',\n//       container: 'top-right',\n//       animationIn: ['animate__animated', 'animate__fadeIn'],\n//       animationOut: ['animate__animated', 'animate__fadeOut'],\n//       dismiss: {\n//         duration: 3000,\n//         onScreen: true,\n//       },\n//     });\n//   };\n\n//   const repeatCheck = newName => {\n//     return items.find(({ name }) => name === newName);\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if (repeatCheck(state.name)) {\n//       showNotification();\n//       return;\n//     }\n\n//     dispatch(contactsOperations.addContact(state));\n//     Object.keys(state).forEach(key =>\n//       dispatchContactForm({ name: key, value: '' }),\n//     );\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label className={s.label}>\n//         Name\n//         <input\n//           className={s.input}\n//           value={state.name}\n//           onChange={handleGetValue}\n//           placeholder=\"Elon Reeve Musk\"\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//       </label>\n//       <label className={s.label}>\n//         Number\n//         <input\n//           className={s.input}\n//           value={state.number}\n//           onChange={handleGetValue}\n//           placeholder=\"1-800-613-8840\"\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//         />\n//       </label>\n//       <button className={s.button} type=\"submit\" aria-label=\"button-submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n\n// export default ContactForm;\n\n//===================================================//\n//**** variable with useState\n//===================================================//\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { store } from 'react-notifications-component';\nimport { contactsOperations } from 'redux/contacts';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const items = useSelector(contactsSelectors.getItems);\n  const dispatch = useDispatch();\n\n  const initialState = { name: '', number: '' };\n\n  const [user, setUser] = useState(initialState);\n\n  const handleGetValue = e => {\n    const name = e.currentTarget.name;\n    const value = e.target.value;\n    setUser(prev => ({ ...prev, [name]: value }));\n  };\n\n  const showNotification = () => {\n    store.addNotification({\n      title: 'Oops!',\n      message:\n        'But there’s already a contact with that name on your contact list',\n      type: 'danger',\n      insert: 'top',\n      container: 'top-right',\n      animationIn: ['animate__animated', 'animate__fadeIn'],\n      animationOut: ['animate__animated', 'animate__fadeOut'],\n      dismiss: {\n        duration: 3000,\n        onScreen: true,\n      },\n    });\n  };\n\n  const repeatCheck = newName => {\n    return items.find(\n      ({ name }) => name.toLowerCase() === newName.toLowerCase(),\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (repeatCheck(user.name)) {\n      showNotification();\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(user));\n    setUser(initialState);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={user.name}\n          onChange={handleGetValue}\n          placeholder=\"Elon Reeve Musk\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          value={user.number}\n          onChange={handleGetValue}\n          placeholder=\"1-800-613-8840\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={s.button} type=\"submit\" aria-label=\"button-submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { changeFilter } from 'redux/contacts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { GoSearch } from 'react-icons/go';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  const handleFilterValue = e =>\n    dispatch(changeFilter(e.currentTarget.value.trim()));\n\n  return (\n    <label className={s.label}>\n      <input\n        className={s.input}\n        placeholder=\"Enter to search...\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterValue}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <GoSearch className={s.icon} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { store } from 'react-notifications-component';\nimport s from './ModalEditContact.module.css';\n\nconst ModalEditContact = ({ idEdit, name, number }) => {\n  const [show, setShow] = useState(false);\n  const dispatch = useDispatch();\n  const [newName, setNewName] = useState(name);\n  const [newNumber, setNewNumber] = useState(number);\n  const items = useSelector(contactsSelectors.getItems);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const repeatCheck = newName => {\n    return items.find(\n      ({ name, id }) =>\n        name.toLowerCase() === newName.toLowerCase() && id !== idEdit,\n    );\n  };\n\n  const showNotification = () => {\n    store.addNotification({\n      title: 'Oops!',\n      message:\n        'But there’s already a contact with that name on your contact list',\n      type: 'danger',\n      insert: 'top',\n      container: 'top-right',\n      animationIn: ['animate__animated', 'animate__fadeIn'],\n      animationOut: ['animate__animated', 'animate__fadeOut'],\n      dismiss: {\n        duration: 3000,\n        onScreen: true,\n      },\n    });\n  };\n\n  const handleEdit = e => {\n    e.preventDefault();\n    if (repeatCheck(newName)) {\n      showNotification();\n      return;\n    }\n\n    const contact = { name: newName, number: newNumber, id: idEdit };\n    dispatch(contactsOperations.editContact(contact));\n    handleClose();\n  };\n\n  const handleGetValue = e => {\n    const field = e.currentTarget.name;\n\n    switch (field) {\n      case 'name':\n        setNewName(e.currentTarget.value);\n        break;\n      case 'number':\n        setNewNumber(e.currentTarget.value);\n        break;\n      default:\n        throw new Error();\n    }\n  };\n\n  return (\n    <>\n      <Button className={s.buttonEdit} onClick={handleShow}>\n        Edit\n      </Button>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n        centered\n        size=\"lg\"\n      >\n        <form className={s.form} onSubmit={handleEdit}>\n          <label className={s.label}>\n            Name\n            <input\n              className={s.inputName}\n              value={newName}\n              onChange={handleGetValue}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label className={s.label}>\n            Number\n            <input\n              className={s.inputNumber}\n              value={newNumber}\n              onChange={handleGetValue}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n\n          <Modal.Footer className={s.modalFooter}>\n            <Button\n              onClick={handleClose}\n              aria-label=\"button-cancel\"\n              className={s.buttonCancel}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleEdit}\n              type=\"submit\"\n              aria-label=\"button-edit\"\n              className={s.buttonDoneEdit}\n            >\n              Edit\n            </Button>\n          </Modal.Footer>\n        </form>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalEditContact;\n","import PropTypes from 'prop-types';\nimport ModalEditContact from 'components/ModalEditContact';\nimport { useDispatch } from 'react-redux';\nimport { FiPhoneCall } from 'react-icons/fi';\nimport { contactsOperations } from 'redux/contacts';\nimport s from './ContactItem.module.css';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <a className={s.link} href=\"tel:{number}\">\n        <p className={s.name}>{name}</p>\n        <div className={s.wrapper}>\n          <FiPhoneCall className={s.icon} />\n          <p className={s.number}>{number}</p>\n        </div>\n      </a>\n      <button\n        className={s.buttonAccent}\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n        aria-label=\"delete contact\"\n      >\n        Delete\n      </button>\n      <ModalEditContact idEdit={id} name={name} number={number} />\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport ContactItem from 'components/ContactItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const items = useSelector(contactsSelectors.getVisibleItems);\n\n  return (\n    <ul className={s.list}>\n      {items.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <ContactItem id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import ReactNotification from 'react-notifications-component';\nimport { useEffect } from 'react';\nimport 'react-notifications-component/dist/theme.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nimport s from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.getContacts()), [dispatch]);\n\n  const visibleItems = useSelector(contactsSelectors.getVisibleItems);\n\n  return (\n    <>\n      <ReactNotification />\n      <Section nameForClass={'section'}>\n        <h1 className={s.title}>My phonebook</h1>\n        <div className={s.newContactWrapper}>\n          <h2 className={s.newContactTitle}>A new contact</h2>\n          <ContactForm />\n        </div>\n      </Section>\n      <Section nameForClass={'sectionList'}>\n        <h2 className={s.titleContacts}>Contacts</h2>\n        <Filter />\n        {visibleItems[0] ? (\n          <ContactList />\n        ) : (\n          <p className={s.text}>There’s nothing here yet...</p>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"sourceRoot":""}